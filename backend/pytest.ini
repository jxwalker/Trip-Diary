# Pytest Configuration for TripCraft AI Backend
# Comprehensive test configuration with advanced features

[tool:pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 7.0

# Add options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing
    --cov-fail-under=80
    --html=reports/pytest_report.html
    --self-contained-html
    --json-report
    --json-report-file=reports/pytest_report.json
    --durations=10
    --maxfail=5

# Asyncio configuration
asyncio_mode = auto

# Markers
markers =
    # Test categories
    unit: Unit tests
    integration: Integration tests
    api: API endpoint tests
    performance: Performance tests
    security: Security tests
    smoke: Smoke tests
    health: Health check tests
    
    # Service types
    database: Database service tests
    llm: LLM service tests
    weather: Weather service tests
    pdf: PDF processing tests
    storage: Storage service tests
    factory: Service factory tests
    
    # Test characteristics
    slow: Slow running tests
    fast: Fast running tests
    flaky: Potentially flaky tests
    critical: Critical functionality tests
    
    # Environment specific
    local: Local environment only
    staging: Staging environment
    production: Production environment safe
    
    # Feature flags
    experimental: Experimental features
    deprecated: Deprecated functionality
    
    # External dependencies
    requires_api_key: Requires external API keys
    requires_network: Requires network access
    requires_docker: Requires Docker
    
    # Test types
    regression: Regression tests
    acceptance: Acceptance tests
    load: Load tests
    stress: Stress tests
    
    # Priority levels
    p0: Priority 0 (critical)
    p1: Priority 1 (high)
    p2: Priority 2 (medium)
    p3: Priority 3 (low)

# Test timeout (in seconds)
timeout = 300
timeout_method = thread

# Warnings
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    */migrations/*
    */alembic/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov
title = TripCraft AI Backend Coverage Report

[coverage:xml]
output = coverage.xml
